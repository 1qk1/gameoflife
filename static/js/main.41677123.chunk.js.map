{"version":3,"sources":["components/Buttons/GridDropdown.js","components/Buttons/ShapesDropdown.js","components/Controls/Controls.js","shapes.js","components/Grid/Cell/Cell.js","components/Grid/Grid.js","containers/GameOfLife/GameOfLife.js","App.js","serviceWorker.js","index.js"],"names":["GridDropdown","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","dropdownOpen","setState","prevState","_this2","react_default","a","createElement","reactstrap_es","size","isOpen","caret","onClick","clicked","React","Component","ShapesDropdown","header","disabled","controls","_ref","startGame","clearGrid","speed","gridSizeHandler","speedChangeHandler","randomGrid","pauseGame","placeShape","className","color","GridDropdown_GridDropdown","ShapesDropdown_ShapesDropdown","lib_default","min","max","step","value","orientation","labels","10","1000","onChange","shapes","acorn","diehard","glider","rPentomino","pentadecathlon","lwss","pulsar","Cell","rowIndex","columnIndex","concat","sqState","PureComponent","Grid","placingShape","style","width","gridSize","grid","map","row","key","Grid_Cell_Cell","GameOfLife","genNo","initGrid","toConsumableArray","rows","columns","newGrid","Array","fill","initRandomGrid","_ref2","Math","random","placeAlive","cell","getAdjacent","_ref3","filter","c","nextGen","nextGenGrid","activeCells","forEach","rowI","colI","push","cellsToCheck","reduce","sum","b","some","itterable","cellStatus","aliveNeighbours","length","clearInterval","timer","setInterval","newSpeed","undefined","placeShape1","shape","placeShape2","centerCell","shapeToPlace","_this$state$gridSize","slicedToArray","startingRow","floor","startingColumn","column","Controls_Controls","incSpeed","changeSpeed","decSpeed","components_Grid_Grid","App","containers_GameOfLife_GameOfLife","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.41677123.chunk.js","sourcesContent":["import React from 'react';\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n\nexport default class GridDropdown extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      dropdownOpen: false\n    };\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  render() {\n    return (\n      <Dropdown size='sm' isOpen={this.state.dropdownOpen} toggle={this.toggle}>\n        <DropdownToggle caret>\n          Grid Size\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem onClick={() => this.props.clicked([25,25])}>25x25</DropdownItem>\n          <DropdownItem onClick={() => this.props.clicked([50,50])}>50x50</DropdownItem>\n          <DropdownItem onClick={() => this.props.clicked([50,100])}>100x50</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n    );\n  }\n}\n","import React from 'react';\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\n\nexport default class ShapesDropdown extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      dropdownOpen: false\n    };\n  }\n\n  toggle() {\n    this.setState(prevState => ({\n      dropdownOpen: !prevState.dropdownOpen\n    }));\n  }\n\n  render() {\n    return (\n      <Dropdown size='sm' isOpen={this.state.dropdownOpen} toggle={this.toggle}>\n        <DropdownToggle caret>\n          Shapes\n        </DropdownToggle>\n        <DropdownMenu>\n          <DropdownItem header disabled>Click on the Grid to place shape</DropdownItem>\n          <DropdownItem onClick={() => this.props.clicked('acorn')}>Acorn</DropdownItem>\n          <DropdownItem onClick={() => this.props.clicked('diehard')}>Diehard</DropdownItem>\n          <DropdownItem onClick={() => this.props.clicked('rPentomino')}>The R-pentomino</DropdownItem>\n          <DropdownItem onClick={() => this.props.clicked('glider')}>Glider</DropdownItem>\n          <DropdownItem onClick={() => this.props.clicked('lwss')}>Lightweight Spaceship</DropdownItem>\n          <DropdownItem onClick={() => this.props.clicked('pentadecathlon')}>Pentadecathlon</DropdownItem>\n          <DropdownItem onClick={() => this.props.clicked('pulsar')}>Pulsar</DropdownItem>\n        </DropdownMenu>\n      </Dropdown>\n    );\n  }\n}\n","import React from 'react';\nimport { Button } from 'reactstrap';\nimport './Controls.css';\nimport GridDropDown from '../Buttons/GridDropdown';\nimport Slider from 'react-rangeslider'\nimport 'react-rangeslider/lib/index.css'\nimport ShapesDropdown from '../Buttons/ShapesDropdown';\n\n\nconst controls = ({startGame, clearGrid, speed, gridSizeHandler, speedChangeHandler, randomGrid, pauseGame, placeShape}) => {\n  return (\n    <div className='GameOfLife-Controls'>\n      <Button size=\"sm\" onClick={startGame} color=\"success\">Start Game</Button>\n      <Button size=\"sm\" onClick={pauseGame} color=\"warning\">Stop Game</Button>\n      <Button size=\"sm\" onClick={clearGrid} color=\"danger\">Clear Grid</Button>\n      <Button size=\"sm\" onClick={randomGrid} color=\"info\">Random Grid</Button>\n      <GridDropDown clicked={gridSizeHandler} />\n      <ShapesDropdown clicked={placeShape} />\n      <div className=\"Speed-Slider\">\n        <Slider\n          min={10}\n          max={500}\n          step={2}\n          value={speed}\n          orientation='horizontal'\n          labels={{\n            10: 'Fast',\n            1000: 'Slow'\n          }}\n          onChange={speedChangeHandler}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default controls\n","export default {\n  acorn: [[false, true, false, false, false, false, false],\n          [false, false, false, true, false, false, false],\n          [true, true, false, false, true, true, true]],\n  diehard: [[false, false, false, false, false, false, true],\n            [true, true, false, false, false,false, false],\n            [false, true, false, false, false, true, true, true]],\n  glider: [[false, true, false],\n           [false, false, true],\n           [true, true, true]],\n  rPentomino: [[false, true, true],\n               [true, true, false],\n               [false, true, false]],\n  pentadecathlon: [[false, false, true, false, false, false, false, true, false],\n                   [true, true, false, true, true, true, true, false, true, true ],\n                   [false, false, true, false, false, false, false, true, false]],\n  lwss: [[false, true, false, false, true],\n         [true, false, false, false, false],\n         [true, false, false, false, true],\n         [true, true, true, true, false]],\n  pulsar: [[false, false, true, true, true, false, false, false, true, true, true, false, false],\n           [false, false, false, false, false, false, false, false, false, false, false, false, false],\n           [true, false, false, false, false, true, false, true, false, false, false, false, true],\n           [true, false, false, false, false, true, false, true, false, false, false, false, true],\n           [true, false, false, false, false, true, false, true, false, false, false, false, true],\n           [false, false, true, true, true, false, false, false, true, true, true, false, false],\n           [false, false, false, false, false, false, false, false, false, false, false, false, false],\n           [false, false, true, true, true, false, false, false, true, true, true, false, false],\n           [true, false, false, false, false, true, false, true, false, false, false, false, true],\n           [true, false, false, false, false, true, false, true, false, false, false, false, true],\n           [true, false, false, false, false, true, false, true, false, false, false, false, true],\n           [false, false, false, false, false, false, false, false, false, false, false, false, false],\n           [false, false, true, true, true, false, false, false, true, true, true, false, false]]\n}","import React, {PureComponent} from 'react'\n\nclass Cell extends PureComponent {\n  render(){\n    return (\n      <div \n        onClick={() => this.props.clicked([this.props.rowIndex, this.props.columnIndex])}\n        className={`GameOfLife-Cell${this.props.sqState === true ? ' GameOfLife-Cell-Alive' : ''}`}\n      />\n    )\n  }\n}\n\n\nexport default Cell;\n","import React, {PureComponent} from 'react';\n\nimport Cell from './Cell/Cell';\n\nimport './Grid.css';\n\n// const grid = ({grid, gridSize, clicked}) => {\n//   return (\n//     <div style={{width: gridSize[1] * 12 }} className=\"GameOfLife-Grid\">\n//       {grid.map((row, rowIndex) => \n//         <div className=\"GameOfLife-Row\" key={rowIndex}>\n//           {row.map((sqState, columnIndex) => \n//             <Cell \n//             gridSize={gridSize}\n//             sqState={sqState}\n//             rowIndex={rowIndex}\n//             columnIndex={columnIndex}\n//             clicked={clicked}\n//             key={`cell-${rowIndex}-${columnIndex}`} \n//             />\n//           )}\n//         </div>\n//       )}\n//     </div>\n//   )\n// }\n\n\nclass Grid extends PureComponent {\n  render() {\n    const placingShape = this.props.placingShape !== null;\n    return (\n      <div style={{width: this.props.gridSize[1] * 12 }} className=\"GameOfLife-Grid\">\n        {this.props.grid.map((row, rowIndex) => \n          <div className=\"GameOfLife-Row\" key={rowIndex}>\n            {row.map((sqState, columnIndex) => \n              <Cell \n              gridSize={this.props.gridSize}\n              sqState={sqState}\n              rowIndex={rowIndex}\n              columnIndex={columnIndex}\n              clicked={placingShape ? this.props.placeShape : this.props.clicked}\n              key={`cell-${rowIndex}-${columnIndex}`} \n              />\n            )}\n          </div>\n        )}\n      </div>\n    )\n  }\n}\n\n\nexport default Grid;","import React, { PureComponent } from 'react'\r\nimport Controls from '../../components/Controls/Controls';\r\nimport shapes from '../../shapes';\r\n\r\nimport Grid from '../../components/Grid/Grid';\r\n\r\nimport './GameOfLife.css';\r\n\r\nclass GameOfLife extends PureComponent {\r\n  state = {\r\n    grid: [],\r\n    genNo: 0,\r\n    gridSize: [50, 100],\r\n    speed: 150,\r\n    placingShape: null\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.initGrid();\r\n  }\r\n\r\n  initGrid = () => {\r\n    const [rows, columns] = [...this.state.gridSize];\r\n    const newGrid = Array(rows).fill(Array(columns).fill(false))\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  initRandomGrid = () => {\r\n    const [rows, columns] = [...this.state.gridSize];\r\n    const newGrid = Array(rows).fill().map(() => Array(columns).fill(false).map(() => Math.random() >= 0.5))\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  placeAlive = cell => {\r\n    const newGrid = [...this.state.grid].map(row => [...row]);\r\n    newGrid[cell[0]][cell[1]] = !newGrid[cell[0]][cell[1]];\r\n    this.setState({grid: newGrid});\r\n  }\r\n\r\n  getAdjacent = cell => {\r\n    const [rows, columns] = [...this.state.gridSize];\r\n    const adjacentCells = [\r\n      [cell[0] - 1, cell[1] - 1],\r\n      [cell[0] - 1, cell[1]],\r\n      [cell[0] - 1, cell[1] + 1],\r\n      [cell[0], cell[1] + 1],\r\n      [cell[0] + 1, cell[1] + 1],\r\n      [cell[0] + 1, cell[1]],\r\n      [cell[0] + 1, cell[1] - 1],\r\n      [cell[0], cell[1] - 1],\r\n    ]\r\n    .filter(c => \r\n      (c[0] >= 0 && c[0] < rows) \r\n      && \r\n      (c[1] >= 0 && c[1] < columns));\r\n    return adjacentCells;\r\n  }\r\n\r\n  nextGen = () => {\r\n    // make a grid for the future generation\r\n    const nextGenGrid = [...this.state.grid].map(row => [...row]);\r\n    // get the active cells on the grid\r\n    const activeCells = [];\r\n    this.state.grid.forEach((row, rowI) => {\r\n      row.forEach((cell, colI) => {\r\n        if (cell === true) {\r\n          activeCells.push([rowI, colI]);\r\n        }\r\n      })\r\n    });\r\n\r\n    // format and add all the dead adjacent cells\r\n    let cellsToCheck = activeCells.reduce((sum, b) => {\r\n      return sum.concat([b, ...this.getAdjacent(b)]);\r\n    }, []);\r\n    // filter so that each cell exists only once\r\n    cellsToCheck = cellsToCheck.reduce((sum, cell) => {\r\n      const existsInSum = sum.some(itterable => (\r\n        itterable[0] === cell[0] && itterable[1] === cell[1])\r\n      );\r\n      if (!existsInSum){\r\n        return [...sum, cell];\r\n      } else {\r\n        return sum;\r\n      }\r\n    }, []);\r\n\r\n    // compare cells to game rules\r\n    cellsToCheck.forEach(cell => {\r\n      const cellStatus = this.state.grid[cell[0]][cell[1]];\r\n      const aliveNeighbours = this.getAdjacent(cell).filter(c => this.state.grid[c[0]][c[1]] === true).length\r\n      if (cellStatus === true) {\r\n        if (aliveNeighbours < 2 || aliveNeighbours > 3) {\r\n          nextGenGrid[cell[0]][cell[1]] = false;\r\n        }\r\n      } else {\r\n        if (aliveNeighbours === 3) {\r\n          nextGenGrid[cell[0]][cell[1]] = true;\r\n        }\r\n      }\r\n    });\r\n    this.setState({grid: nextGenGrid, genNo: this.state.genNo + 1});\r\n  }\r\n\r\n  startGame = () => {\r\n    clearInterval(this.timer);\r\n    this.timer = setInterval(() => {\r\n      this.nextGen();\r\n    }, this.state.speed);\r\n  }\r\n\r\n  pauseGame = () => {\r\n    clearInterval(this.timer);\r\n  }\r\n\r\n  clearGrid = () => {\r\n    clearInterval(this.timer);\r\n    this.initGrid();\r\n    this.setState({genNo: 0});\r\n  }\r\n\r\n  gridSizeHandler = size => {\r\n    this.clearGrid();\r\n    this.setState({gridSize: size}, () => {\r\n      this.initGrid();\r\n    })\r\n  }\r\n\r\n  speedChangeHandler = newSpeed => {\r\n    this.setState({speed: newSpeed}, () => {\r\n      const gameOn = this.timer !== undefined;\r\n      if (gameOn === true) {\r\n        this.startGame();\r\n      }\r\n    });\r\n  }\r\n\r\n  placeShape1 = (shape) => {\r\n    // first phase when you click the shape from the dropdown\r\n    this.setState({placingShape: shape});\r\n  }\r\n\r\n  placeShape2 = (centerCell) => {\r\n    // second phase when you click a cell on the grid\r\n    // takes center cell (function argument)\r\n    // takes shape to place\r\n    const shapeToPlace = shapes[this.state.placingShape];\r\n\r\n    // takes the grid\r\n    const newGrid = [...this.state.grid].map(row => [...row]);\r\n    // take starting position to place the shape\r\n    const [rows, columns] = this.state.gridSize;\r\n    // calculates starting position around the center cell\r\n    const [startingRow, startingColumn] = [\r\n      centerCell[0] - Math.floor(shapeToPlace.length / 2), \r\n      centerCell[1] - Math.floor(shapeToPlace[0].length / 2)\r\n    ];\r\n    // places shape\r\n    shapeToPlace.forEach((row, rowIndex) => {\r\n      // if it's out of range it just moves on #0hecks\r\n      if (rowIndex + startingRow >= 0 && rowIndex + startingRow < rows){\r\n        row.forEach((column, columnIndex) => {\r\n          if (columnIndex + startingColumn >= 0 && columnIndex + startingColumn < columns) {\r\n            newGrid[rowIndex + startingRow][columnIndex + startingColumn] = column;\r\n          }\r\n        })\r\n      }\r\n    })\r\n    // sets states back to new grid\r\n    this.setState({grid: newGrid, placingShape: null});\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='GameOfLife'>\r\n      <h1>Conway&apos;s Game of Life</h1>\r\n        <Controls\r\n          speed={this.state.speed}\r\n          speedChangeHandler={this.speedChangeHandler}\r\n          randomGrid={this.initRandomGrid}\r\n          startGame={this.startGame}\r\n          clearGrid={this.clearGrid}\r\n          pauseGame={this.pauseGame}\r\n          incSpeed={() => this.changeSpeed('inc')}\r\n          decSpeed={() => this.changeSpeed('dec')}\r\n          gridSizeHandler={this.gridSizeHandler}\r\n          placeShape={this.placeShape1}\r\n        />\r\n        <Grid \r\n          gridSize={this.state.gridSize} \r\n          grid={this.state.grid} \r\n          clicked={this.placeAlive}\r\n          placingShape={this.state.placingShape}\r\n          placeShape={this.placeShape2}\r\n        />\r\n        <h3>Generation: {this.state.genNo}</h3>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default GameOfLife;","import React, { Component } from 'react';\n\nimport GameOfLife from './containers/GameOfLife/GameOfLife';\n\nclass App extends Component {\n  render() {\n    return <GameOfLife />\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}